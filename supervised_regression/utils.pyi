from typing import Any, Tuple
from pandas import DataFrame
from numpy import ndarray


def downloadHousingData() -> None:
    """
    Downloads the Housing data zip file from a GitHub repository, create the 'data' directory if not exists and finally extracts the content from the zip file.

    Parameters
    None

    Returns
    None
    """
    ...

def downloadCaliforniaMap() -> None:
    """
    Downloads the California map .shp file, create the 'data' directory if not exists and finally extracts the content from the zip file.

    Parameters
    None

    Returns
    None
    """
    ...

def saveGraph(graph_id: str, tight_layout: bool = True, graph_extension: str = 'png', resolution: int = 300) -> None:
    """
    Downloads a graph generated by matplotlib with the specified name, graph extension and resolution.

    Parameters
    - graph_id (str): Graph name
    - tight_layout (bool): Activate the tigh_layout configuration
    - graph_extension (str): Extension to save the image (png, jpg, svg, etc...)
    - Resolution (int): DPI resolution for saving the figure

    Returns
    None
    """
    ...

def randomDataSplitter(data: DataFrame, test_ratio: float) -> Tuple[DataFrame, DataFrame]:
    """
    Splits a dataframe randomly into a test and train set for ML models.

    Parameters
    - data (DataFrame): A pandas DataFrame containing the data.
    - test_ratio (float): A ratio between 0 and 1 for the test set size proportion.

    Returns
    - trainSet (DataFrame): A pandas DataFrame with the train data.
    - testSet (DataFrame): A pandas DataFrame with the test data.
    """
    ...

def thousandsFormat(x: int, p: Any) -> str:
    """
    This function format an integer number with the thousands format

    Parameters
    - x (int): The integer number to be formatted with thousands.
    - p (any): A placeholder for some functions.

    Returns
    - x formatted (str): A string representation of the formatted number.
    """
    ...

def designedBarGraph(filename: str, labels: ndarray, values: ndarray, tittle: str, xlabel: str, ylabel: str, color: str = '#329D9C') -> None:
    """
    This function creates a minimalistic and visually appealing bar graph and stores it as a png file in an image directory.

    Parameters
    - filename (str): The file name for the .png graph
    - labels (ndarray): The X-axis labels
    - values (ndarray): The Y-axis values
    - tittle (str): The graph tittle
    - color (str): The bars colors

    Returns
    None
    """
    ...