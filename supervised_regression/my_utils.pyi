from typing import Any, Tuple
from pandas import DataFrame
from numpy import ndarray


def downloadHousingData() -> None:
    """
    Downloads the Housing data zip file from a GitHub repository, create the 'data' directory if not exists and finally extracts the content from the zip file.

    Parameters
    None

    Returns
    None
    """
    ...

def downloadCaliforniaMap() -> None:
    """
    Downloads the California map .shp file, create the 'data' directory if not exists and finally extracts the content from the zip file.

    Parameters
    None

    Returns
    None
    """
    ...

def saveGraph(graph_id: str, tight_layout: bool=True, graph_extension: str='png', resolution: int=300) -> None:
    """
    Downloads a graph generated by matplotlib with the specified name, graph extension and resolution.

    Parameters
    - graph_id: Graph name
    - tight_layout: Activate the tigh_layout configuration
    - graph_extension: Extension to save the image (png, jpg, svg, etc...)
    - Resolution: DPI resolution for saving the figure

    Returns
    None
    """
    ...

def randomDataSplitter(data: DataFrame, test_ratio: float) -> Tuple[DataFrame, DataFrame]:
    """
    Splits a dataframe randomly into a test and train set for ML models.

    Parameters
    - data: A pandas DataFrame containing the data.
    - test_ratio: A ratio between 0 and 1 for the test set size proportion.

    Returns
    - trainSet: A pandas DataFrame with the train data.
    - testSet: A pandas DataFrame with the test data.
    """
    ...

def thousandsFormat(x: int, p: Any) -> str:
    """
    This function format an integer number with the thousands format

    Parameters
    - x: The integer number to be formatted with thousands.
    - p: A placeholder for some functions.

    Returns
    - x formatted: A string representation of the formatted number.
    """
    ...

def barGraph(filename: str, labels: ndarray, values: ndarray, tittle: str, xlabel: str, ylabel: str, color: str='#329D9C') -> None:
    """
    This function creates a minimalistic and visually appealing bar graph and stores it as a png file in an image directory.

    Parameters
    - filename: The file name for the .png graph
    - labels: The X-axis labels
    - values: The Y-axis values
    - tittle: The graph tittle
    - color: The bars colors

    Returns
    None
    """
    ...

def multiHist(filename: str, df: DataFrame, bins: int=50, kde: bool=True, bar_color: str='#329D9C', kde_color: str='#472F7D') -> None:
    """
    This function creates a figure containing multiple histograms based on the numeric columns of a given DataFrame.
    
    ## Parameters
    - filename: The file name for the .png graph
    - df: A DataFrame containing at least 1 numeric column (can contain numeric and no-numeric columns)
    - bins: The number of bins to plot in the histograms
    - kde: Flag to plot the kde line in histograms
    - bar_color: Color string or HexCode for the bars
    - kde_color: Color string or HexCode for the kde line

    ## Returns
    A .png image containing the histograms saved in a 'images' directory
    """
    ...